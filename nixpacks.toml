[phases.setup]
aptPkgs = ["git"]
# Disable Railway's autodetection to prevent it from trying to run its own package manager
nixPkgs = ["nodejs_20"]

# Set up Corepack for Yarn 4 and handle all installation
[phases.install]
dependsOn = ["setup"]
cmds = [
  "npm install -g corepack@0.24.1",
  "corepack enable",
  "yarn -v",
  "echo 'Installing dependencies...'",
  "cd /app && YARN_ENABLE_IMMUTABLE_INSTALLS=false yarn install --mode update-lockfile",
  "echo 'Dependencies installed successfully.'"
]

# Build the packages in the right order
[phases.build]
dependsOn = ["install"]
cmds = [
  # Step 1: Build the shared package 
  "echo '=== Step 1: Building shared package ==='",
  "cd /app/packages/shared && yarn build",
  "echo 'Shared package built successfully:'",
  "ls -la /app/packages/shared/dist",
  
  # Step 2: Build the API package
  "echo '=== Step 2: Building API package ==='", 
  "cd /app/packages/server/api && yarn build",
  "echo 'API package built successfully.'",
  
  # Step 3: Manually create proper node_modules structure
  "echo '=== Step 3: Preparing deployment environment ==='",
  
  # Step 4: Make sure symlinks are properly recreated in the node_modules
  "echo '=== Step 4: Ensuring modules are available ==='",
  
  # Remove any existing shared package directory to avoid conflicts
  "echo 'Removing any existing shared package symlink or directory...'",
  "rm -rf /app/packages/server/api/node_modules/@wavenotes-new/shared",
  
  # Create parent directories if they don't exist
  "mkdir -p /app/packages/server/api/node_modules/@wavenotes-new",
  
  # Copy the ENTIRE shared package including the dist directory
  "echo 'Copying shared package with all files...'",
  "cp -r /app/packages/shared /app/packages/server/api/node_modules/@wavenotes-new/",
  
  # Critical: Ensure the dist directory was successfully copied
  "echo 'Verifying dist directory was correctly copied:'",
  "ls -la /app/packages/server/api/node_modules/@wavenotes-new/shared/dist || echo 'ERROR: dist directory not found!'",
  
  # Ensure package.json has correct main entry
  "echo 'Ensuring package.json main entry is correct'",
  "node -e \"const fs=require('fs'); const path='/app/packages/server/api/node_modules/@wavenotes-new/shared/package.json'; const pkg=JSON.parse(fs.readFileSync(path)); console.log('Current main entry:', pkg.main); pkg.main='dist/index.js'; fs.writeFileSync(path, JSON.stringify(pkg, null, 2)); console.log('Updated main entry to:', 'dist/index.js');\"",
  
  # Verify the final structure and check that index.js specifically exists
  "echo 'Verifying main index.js file exists:'",
  "ls -la /app/packages/server/api/node_modules/@wavenotes-new/shared/dist/index.js || echo 'ERROR: index.js NOT FOUND!'",
  
  # Add a comprehensive test of the module loading
  "echo 'Testing module loading with a simple script:'",
  "echo 'try { const shared = require(\"/app/packages/server/api/node_modules/@wavenotes-new/shared\"); console.log(\"Module loaded successfully!\", Object.keys(shared)); } catch (err) { console.error(\"Failed to load module:\", err); process.exit(1); }' > /app/test-module.js",
  "cd /app && node test-module.js"
]

# Launch the API service
[start]
cmd = "cd /app/packages/server/api && NODE_ENV=production node dist/index.js"

# Explicitly disable Railway's automatic package detection
[detect]
# Disable auto-detection for both npm and yarn
NPM = false
YARN = false

[variables]
NODE_ENV = "production" 