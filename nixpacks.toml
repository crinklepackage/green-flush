[phases.setup]
aptPkgs = ["git"]
# Disable Railway's autodetection to prevent it from trying to run its own package manager
nixPkgs = ["nodejs_20"]

# Set up Corepack for Yarn 4 and handle all installation
[phases.install]
dependsOn = ["setup"]
cmds = [
  "npm install -g corepack@0.24.1",
  "corepack enable",
  "yarn -v",
  "echo 'Installing dependencies...'",
  "cd /app && YARN_ENABLE_IMMUTABLE_INSTALLS=false yarn install --mode update-lockfile",
  "echo 'Dependencies installed successfully.'"
]

# Build the packages in the right order
[phases.build]
dependsOn = ["install"]
cmds = [
  # Step 1: Build the shared package 
  "echo '=== Step 1: Building shared package ==='",
  "cd /app/packages/shared && yarn build",
  "echo 'Shared package built successfully:'",
  "ls -la /app/packages/shared/dist",
  
  # Step 2: Build the API package
  "echo '=== Step 2: Building API package ==='", 
  "cd /app/packages/server/api && yarn build",
  "echo 'API package built successfully.'",
  
  # Step 3: Manually create proper node_modules structure
  "echo '=== Step 3: Preparing deployment environment ==='",
  
  # If node_modules exists, preserve it - it should have been created during install
  "echo 'Preserving core node_modules structure...'",
  
  # Step 4: Make sure symlinks are properly recreated in the node_modules
  # The key is that we need to *replace* the symlink with the actual files
  "echo '=== Step 4: Ensuring modules are available ==='",
  "echo 'Recreating package structure...'",
  
  # Remove and recreate the shared package directory
  "rm -rf /app/packages/server/api/node_modules/@wavenotes-new/shared || true",
  "mkdir -p /app/packages/server/api/node_modules/@wavenotes-new/shared",
  
  # Copy EVERYTHING from the source package
  "echo 'Copying shared package with all files...'",
  "cp -rf /app/packages/shared/* /app/packages/server/api/node_modules/@wavenotes-new/shared/",
  
  # Ensure package.json has correct main entry
  "echo 'Ensuring package.json main entry is correct'",
  "node -e \"const fs=require('fs'); const path='/app/packages/server/api/node_modules/@wavenotes-new/shared/package.json'; const pkg=JSON.parse(fs.readFileSync(path)); pkg.main='dist/index.js'; fs.writeFileSync(path, JSON.stringify(pkg, null, 2));\"",
  
  # Verify the final structure
  "echo 'Verifying final module structure:'",
  "find /app/packages/server/api/node_modules/@wavenotes-new/shared -type f -name 'index.js' | sort",
  "ls -la /app/packages/server/api/node_modules/@wavenotes-new/shared/dist",
  
  # Debug: Show loading paths - this creates a script we can use to troubleshoot
  "echo 'Creating debug script...'",
  "echo 'console.log(\"Debug module loading attempt\"); try { const shared = require(\"@wavenotes-new/shared\"); console.log(\"Successfully loaded shared:\", Object.keys(shared)); } catch (err) { console.error(\"Failed to load shared:\", err); console.log(\"Module search paths:\", module.paths); }' > /app/debug-modules.js",
  "echo 'Running debug script from API directory...'",
  "cd /app/packages/server/api && node ../../debug-modules.js"
]

# Launch the API service
[start]
cmd = "cd /app/packages/server/api && NODE_ENV=production node dist/index.js"

# Explicitly disable Railway's automatic package detection
[detect]
# Disable auto-detection for both npm and yarn
NPM = false
YARN = false

[variables]
NODE_ENV = "production" 