
READ THIS ENTIRE DOCUMENT BEFORE YOU START WORKING ON ANYTHING.
read @docs folder first. 

In this project, we are rebuilding our app with the new architecture. We're utilizing existing infrastructure like our supabase (postgresql db) and railway (for api and worker) and vercel (for client). 

ALWAYS
When suggesting solutions, code, and changes:
- Read documentation completely before suggesting changes
- Don't over-interpret single lines of documentation
- Question my assumptions when they lead to major refactors
- Question your assumptions when they lead to major refactors
- Always read the entire file from start to finish
- Always finish reading a file before taking action
- Always keep separation of concerns in mind. Every time you suggest code, you must first consider separation of concerns. No patches or quick immediate fixes. Always zoom out and see the bigger picture before suggesting code.
- Think about architecture first, not just fixing errors
- Consider where code should live, not just where it could live
- Look for patterns in our existing codebase
- Consider reusability and maintainability
- Suggest proper separation of concerns
- If you're not sure about architecture, ask before implementing
- Work within our existing structure first
- Reference but don't blindly copy old code
- Follow the patterns we've already established
- Ask to see relevant files if needed
- Suggest new files only when they clearly fit our architecture
- Check for similar patterns in our codebase
- Only suggest new files if you can't find existing solutions

Or more simply:
- "Don't just fix the immediate problem - think about where this code belongs in our architecture and why."


ALWAYS when dealing with file path issues:
- Check if these services already exist in our codebase (maybe under a different name or file name)
- Look at how similar services are structured in our API or other packages
- See if we're just having import/path issues


Working in the /client package:
The key is keeping parallel structure between node and browser while maintaining the separation between:

Entities (database records)
Requests (API inputs)
Jobs (queue processing)

—
Our old code had too many wires crossed and it was too hard to fix. So we took our learnings and started fresh with our new architecture, which is outlined in the @architecture.txt document. 

Always read docs and files, and always read them to the end, from start to finish. If you don't read the whole file from the start, then recognize that, and read it from the bottom. Always finish it before taking action to gain maximum context and undersatnding. 

I've put together an old implementation documentation folder @docs/old-implementation that includes snippets from our old code that can be used to *inform* but not *dictate* our new code in this project. 

Your goal is *not* to copy the old code. It's there as a guide, a communication tool, and in some cases, code we can reuse.

We want to take the best from our old code—whether it be ideas, or actual code—and use that to expedite building our new app. But we don't want to follow the old code exactly, and make the same mistakes. 

So your job is to be smart and judicious. Do not just make decisions based on the old code. Question them, interrogate them, and ensure we're moving forward with a clear separation of services and quality code.


OTHER DOCUMENTS:
- @overview.md
- @architecture.txt
- @database-schema.txt
- @old-implementation


GUIDELINES:
Guidelines for Developers:

1.Clear Separation of Concerns

API does lightweight operations (metadata, record creation)
Worker handles heavy processing (transcripts, matching)
Never mix these responsibilities

2. Platform Service Rules
// ❌ Don't do this in API's youtube.ts
async getTranscript() {
  // Heavy processing belongs in worker
}

// ✅ Do this instead
async getMetadata() {
  // Light API calls only
}

Working in the /client package:
The key is keeping parallel structure between node and browser while maintaining the separation between:

Entities (database records)
Requests (API inputs)
Jobs (queue processing)

packages/shared/src/
├── browser/                # Browser-specific code
│   └── types/
│       ├── entities/      # Client-side record types
│       ├── requests/      # API request types
│       └── jobs/          # Job types
├── node/                  # Node-specific code
│   ├── schemas/          # Zod validation
│   ├── types/            # Full DB types
│   └── errors/           # Server errors
└── common/               # Truly shared code
    ├── transforms/       # Pure functions like mapStatusToClient
    ├── constants/        # Shared constants
    └── types/            # Shared type utilities

Good for common: 
// common/transforms/status.ts
export const mapStatusToClient = (serverStatus: string): string => {
  const statusMap = {
    'in_queue': 'IN_QUEUE',
    'processing': 'PROCESSING'
  } as const
  return statusMap[serverStatus] || serverStatus
}

// common/constants/status.ts
export const PROCESSING_STATUSES = ['in_queue', 'processing'] as const


Not for common:
// This belongs in node/types/database.ts
export interface Database {
  public: {
    Tables: {
      podcasts: { /* ... */ }
    }
  }
}



3. Type Safety First

Always use types from shared package
No any types allowed
Define interfaces for all API responses


4. State Management
// ❌ Don't use string literals
status: 'processing'

// ✅ Use shared constants
status: ProcessingStatus.PROCESSING


5. Error Handling

Use custom error types from shared package
Always include context in errors
Handle platform-specific errors appropriately


6. Code Organization

One responsibility per file
Keep services focused and small
Don't duplicate platform logic between API/worker


7. Configuration

All environment variables defined in shared types
Use dependency injection for services
No hard-coded values



_____
Dependency Management Strategy

1. Workspace Structure
Our monorepo uses Yarn workspaces:
packages/
├── client/        # Frontend package
├── server/
│   ├── api/      # API package
│   └── worker/   # Worker package
└── shared/       # Shared package

2. Adding Dependencies

CORRECT:
# From root directory (preferred method)
yarn workspace @wavenotes-new/api add @supabase/supabase-js
yarn workspace @wavenotes-new/client add react-query
yarn workspace @wavenotes-new/worker add bullmq

# Alternative: from package directory
cd packages/server/api
yarn add @supabase/supabase-js

INCORRECT:
❌ Running yarn install in individual packages
❌ Installing shared dependencies in multiple packages
❌ Installing service-specific deps in root package.json

3. Dependency Principles

a) Package Independence
- Each package should manage its own dependencies
- Dependencies should be declared where they're used
- Avoid duplicate dependencies across packages

b) Shared Dependencies
- Common utilities go in shared package
- Types used by multiple packages go in shared
- Core libraries used everywhere should be in root

c) Examples:
CORRECT:
- @supabase/supabase-js in api package (API-specific)
- bullmq in worker package (Worker-specific)
- typescript in root (used by all)
- @types/node in root (used by all)

INCORRECT:
- @supabase/supabase-js in root (service-specific)
- react in worker (frontend-only)
- shared types in individual packages

4. TypeScript Configuration Strategy

We use a centralized TypeScript configuration approach:

a) Root Configuration (tsconfig.json)
- Contains shared compiler options
- Sets project-wide standards
- Includes common settings like:
  - target: ES2020
  - strict: true
  - skipLibCheck: true
  - etc.

b) Service-Specific Configurations
- Extend from root using "extends": "../../tsconfig.json"
- Override only what's necessary
- Add service-specific settings

WHY THIS APPROACH:
- Maintains consistency across packages
- Reduces configuration duplication
- Easier to make project-wide changes
- Better for solo development
- Simpler AI collaboration
- More maintainable for single-product focus

5. Installation and Updates

Always run these commands from root:
yarn install          # Install all dependencies
yarn upgrade         # Update all dependencies
yarn clean          # Clean all node_modules

Never run in individual packages:
❌ cd packages/api && yarn install
❌ cd packages/worker && yarn upgrade

6. Dependency Resolution
- Yarn workspaces handles dependency hoisting
- node_modules are primarily in root
- Package-specific node_modules only contain unique deps

7. Version Management
- Lock files are managed at root level
- Package versions are managed in individual package.json files
- Shared dependencies should use same version across packages 



Here's my mindset for organizing shared types in a monorepo:

Core Principles

Browser code should NEVER have runtime dependencies
Node code can have validation/runtime checks
Anything truly shared must be pure TypeScript
Organize by purpose, not by file type


Decision Tree for Every Type/Interface
CopyIs it used in browser?
├── Yes: Does it need runtime validation?
│   ├── Yes: Split into browser/types and node/schemas
│   └── No: Put in common/
└── No: Does it have node-specific dependencies?
    ├── Yes: Put in node/types
    └── No: Consider if it belongs in common/

Directory Organization Mindset

Group by domain first (entities, jobs, requests)
Then by environment (browser vs node)
Then by purpose (types vs schemas)
Create subdirectories when a concept has multiple related files
Keep parallel structure between browser/node when possible


Common Patterns to Watch For

Database types usually belong in node/
Platform API types belong in node/
UI state types belong in browser/
Pure type utilities can go in common/
Status enums often need both browser/node versions


Red Flags

Duplicate type definitions
Types mixing runtime and compile-time concerns
Large files that could be split by domain
Browser code importing from node/
Circular dependencies between directories




Example: 
Let's organize these properly:

Platform Metadata (metadata.ts):

plaintextCopy/shared/src/node/types/platforms/metadata.ts
Should contain:

VideoMetadata
Platform-specific interfaces


Database Types (database.ts):

plaintextCopy/shared/src/node/types/database/index.ts
Should split into:
plaintextCopy/shared/src/node/types/database/
├── index.ts          # Exports everything
├── records.ts        # PodcastRecord, SummaryRecord
├── rpc.ts           # RPCPodcastResponse, RPC types
└── supabase.ts      # Database interface, Json type
Reasoning:

Platform Metadata

Goes in node/types/platforms because it's:

Used by platform services
Server-side only
Related to external APIs




Database Types

Goes in node/types/database because it's:

Supabase specific
Server-side only
Complex enough to warrant its own directory




Current Duplication

Json type is defined twice
PodcastRecord is in both files
Database interface contains everything