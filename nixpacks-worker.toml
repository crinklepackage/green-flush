[phases.setup]
aptPkgs = ["git"]
# Disable Railway's autodetection
nixPkgs = ["nodejs_20"]

# Set up Corepack for Yarn 4 without cache mounts
[phases.install]
dependsOn = ["setup"]
cmds = [
  "npm install -g corepack@0.24.1",
  "corepack enable",
  "yarn -v",
  "echo 'Installing dependencies...'",
  # Run a clean install with immutable installs disabled
  "cd /app && YARN_ENABLE_IMMUTABLE_INSTALLS=false yarn install",
  "echo 'Dependencies installed successfully.'"
]

# Simplify build process
[phases.build]
dependsOn = ["install"]
cmds = [
  # Run the prebuild script directly for shared package
  "echo '=== Building shared package ==='",
  "cd /app/packages/shared && node prebuild.js",
  
  # Run the test script to verify TranscriptSource is available
  "echo '=== Testing TranscriptSource enum ==='",
  "cd /app/packages/shared && node test-enum.js",
  
  # Verify TranscriptSource enum was generated
  "echo '=== Verifying TranscriptSource files ==='",
  "cat /app/packages/shared/dist/server/types/transcript.js",
  "cat /app/packages/shared/dist/index.js | grep TranscriptSource",
  "ls -la /app/packages/shared/dist/server/types/",
  
  # Build the API package more carefully
  "echo '=== Building API package ==='", 
  "cd /app/packages/server/api && yarn build || (echo 'API build failed, using fallback' && mkdir -p dist && cd /app && yarn add -D @babel/cli @babel/core @babel/preset-env @babel/preset-typescript && cd /app/packages/server/api && echo '{\"presets\": [\"@babel/preset-env\", \"@babel/preset-typescript\"]}' > babel.config.json && npx babel src --extensions '.ts,.js' --out-dir dist)",
  
  # Build the worker package with fallback
  "echo '=== Building worker package ==='",
  "cd /app/packages/server/worker && yarn build || (echo 'Worker build failed, using fallback' && mkdir -p dist && cd /app && yarn add -D @babel/cli @babel/core @babel/preset-env @babel/preset-typescript && cd /app/packages/server/worker && echo '{\"presets\": [\"@babel/preset-env\", \"@babel/preset-typescript\"]}' > babel.config.json && npx babel src --extensions '.ts,.js' --out-dir dist)",
  
  # Debug: list the contents of the dist directory
  "echo '=== Checking worker dist directory ==='",
  "ls -la /app/packages/server/worker/dist || echo 'Worker dist directory not found'",
  
  # Create proper workspace module structure for deployment
  "echo '=== Setting up proper module structure ==='",
  # 1. Create needed directories
  "mkdir -p /app/packages/server/worker/node_modules/@wavenotes-new/api/dist/lib",
  "mkdir -p /app/packages/server/worker/node_modules/@wavenotes-new/shared/dist/server/types",
  
  # 2. Copy the API package to worker node_modules
  "echo 'Copying API package to worker node_modules...'",
  "cp -r /app/packages/server/api/dist/* /app/packages/server/worker/node_modules/@wavenotes-new/api/dist/",
  "cp /app/packages/server/api/package.json /app/packages/server/worker/node_modules/@wavenotes-new/api/",
  
  # 3. Copy the shared package to worker node_modules
  "echo 'Copying shared package to worker node_modules...'",
  "cp -r /app/packages/shared/dist/* /app/packages/server/worker/node_modules/@wavenotes-new/shared/dist/",
  "cp /app/packages/shared/package.json /app/packages/server/worker/node_modules/@wavenotes-new/shared/",
  
  # 4. Create a direct link for TranscriptSource in case of import issues
  "echo 'Creating direct export for TranscriptSource...'",
  "echo 'exports.TranscriptSource = { SUPADATA: \"supadata\", YOUTUBE_TRANSCRIPT: \"youtube-transcript\", YOUTUBE_API: \"YouTube API\" };' > /app/packages/server/worker/node_modules/@wavenotes-new/shared/TranscriptSource.js",
  "echo 'module.exports = require(\"./TranscriptSource\");' >> /app/packages/server/worker/node_modules/@wavenotes-new/shared/dist/server/types/transcript.js",
  
  # 5. Verify the worker can access TranscriptSource
  "echo 'Testing TranscriptSource in worker context...'",
  "cd /app/packages/server/worker && echo 'try { const shared = require(\"@wavenotes-new/shared\"); console.log(\"TranscriptSource:\", shared.TranscriptSource); } catch(e) { console.error(\"Error:\", e); }' > test.js",
  "cd /app/packages/server/worker && node test.js",
  
  # 6. Patch the worker code if needed
  "echo 'Patching worker transcript processor if needed...'",
  "cd /app/packages/server/worker/dist/processors && grep -q 'TranscriptSource.SUPADATA' transcript.js && echo 'Fixing TranscriptSource reference in transcript.js' && sed -i 's/_shared.TranscriptSource.SUPADATA/\"supadata\"/g; s/_shared.TranscriptSource.YOUTUBE_TRANSCRIPT/\"youtube-transcript\"/g; s/_shared.TranscriptSource.YOUTUBE_API/\"YouTube API\"/g' transcript.js || echo 'No TranscriptSource references found or already fixed'"
]

# Ensure the start command is correct
[start]
cmd = "cd /app/packages/server/worker && NODE_PATH=/app node dist/index.js"

# Explicitly disable Railway's automatic package detection
[detect]
# Disable auto-detection for both npm and yarn
NPM = false
YARN = false

[variables]
NODE_ENV = "production" 